---
import { Moon, Sun } from '@phosphor-icons/react';
---

<theme-toggle>
    <button
        class="flex items-center justify-center outline-none transition-all"
        type="button"
    >
        <span class="sr-only">Dark Theme</span>
        <Sun
            id="sun-svg"
            focusable="false"
            aria-hidden="true"
            className="relative top-[2px] block h-5 w-5 scale-100 opacity-100 dark:hidden dark:opacity-0"
        />
        <Moon
            id="moon-svg"
            focusable="false"
            aria-hidden="true"
            className="relative top-[2px] hidden h-5 w-5 opacity-0 dark:block dark:opacity-100"
        />
    </button>
</theme-toggle>

<script>
    // Note that if you fire the theme-change event outside of this component, it will not be reflected in the button's aria-checked attribute
    import { rootInDarkMode } from '../utils';

    class ThemeToggle extends HTMLElement {
        #controller: AbortController | undefined;

        connectedCallback() {
            const button = this.querySelector('button')!;
            // set aria role value
            button.setAttribute('role', 'switch');
            button.setAttribute('aria-checked', String(rootInDarkMode()));
            // Abort signal
            const { signal } = (this.#controller = new AbortController());

            // button event
            button.addEventListener(
                'click',
                () => {
                    // invert theme
                    let themeChangeEvent = new CustomEvent('theme-change', {
                        detail: {
                            theme: rootInDarkMode() ? 'light' : 'dark',
                        },
                    });
                    // dispatch event -> ThemeProvider.astro
                    document.dispatchEvent(themeChangeEvent);

                    // set the aria-checked attribute
                    button.setAttribute(
                        'aria-checked',
                        String(rootInDarkMode())
                    );
                },
                { signal }
            );
        }

        disconnectedCallback() {
            this.#controller?.abort();
        }
    }

    customElements.define('theme-toggle', ThemeToggle);
</script>
